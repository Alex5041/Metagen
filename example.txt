C:\Users\alex\.jdks\adopt-openjdk-11.0.9.1\bin\java.exe "-javaagent:C:\Tools\IntelliJ IDEA 2021.1\lib\idea_rt.jar=53708:C:\Tools\IntelliJ IDEA 2021.1\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\alex\Documents\GitHub\Metagen\build\classes\kotlin\main;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib-jdk8\1.6.10\e80fe6ac3c3573a80305f5ec43f86b829e8ab53d\kotlin-stdlib-jdk8-1.6.10.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.junit.jupiter\junit-jupiter\5.8.2\5a817b1e63f1217e5c586090c45e681281f097ad\junit-jupiter-5.8.2.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-reflect\1.6.0\a215a7f914d5916dc5fd2d45cea16524e0220203\kotlin-reflect-1.6.0.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\com.github.nwillc.ksvg\ksvg-jvm\master-SNAPSHOT\17afd0c960c952a69f411cb551331710a4812ef6\ksvg-jvm-master-SNAPSHOT.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib-jdk7\1.6.10\e1c380673654a089c4f0c9f83d0ddfdc1efdb498\kotlin-stdlib-jdk7-1.6.10.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib\1.6.10\b8af3fe6f1ca88526914929add63cf5e7c5049af\kotlin-stdlib-1.6.10.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.junit.jupiter\junit-jupiter-params\5.8.2\ddeafe92fc263f895bfb73ffeca7fd56e23c2cce\junit-jupiter-params-5.8.2.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.junit.jupiter\junit-jupiter-api\5.8.2\4c21029217adf07e4c0d0c5e192b6bf610c94bdc\junit-jupiter-api-5.8.2.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlinx\kotlinx-serialization-json-jvm\1.3.2\83bf06c9ec6f37fbc0664f66cb220f18e845c1a6\kotlinx-serialization-json-jvm-1.3.2.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib-common\1.6.10\c118700e3a33c8a0d9adc920e9dec0831171925\kotlin-stdlib-common-1.6.10.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains\annotations\13.0\919f0dfe192fb4e063e7dacadee7f8bb9a2672a9\annotations-13.0.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-commons\1.8.2\32c8b8617c1342376fd5af2053da6410d8866861\junit-platform-commons-1.8.2.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.opentest4j\opentest4j\1.2.0\28c11eb91f9b6d8e200631d46e20a7f407f2a046\opentest4j-1.2.0.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlinx\kotlinx-serialization-core-jvm\1.3.2\e25f48b4e070f969aa7ac3374d467f9c7f088766\kotlinx-serialization-core-jvm-1.3.2.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.junit.jupiter\junit-jupiter-engine\5.8.2\c598b4328d2f397194d11df3b1648d68d7d990e3\junit-jupiter-engine-5.8.2.jar;C:\Users\alex\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-engine\1.8.2\b737de09f19864bd136805c84df7999a142fec29\junit-platform-engine-1.8.2.jar MainKt
import
  (IDENT):imported
fun
  (
    (IDENT):main
  {
    (
      (IDENT):test
      ==
        (
          (IDENT):addition
          (NUMBER):2
          (NUMBER):3
        (NUMBER):5
    (ASSIGNMENT):=
      (IDENT):a
      []:ARRAY
        (NUMBER):2
    (LINK):.
      (IDENT):a
      (
        (IDENT):add
        []:ARRAY
          (NUMBER):1
    (LINK):.
      (IDENT):a
      (
        (IDENT):add
        (IDENT):a
    (
      (IDENT):log
      (IDENT):a
    (
      (IDENT):checkType
    (
      (IDENT):checkArray
    (
      (IDENT):checkWhile
    (
      (IDENT):test
      ==
        (
          (IDENT):checkNestedReturn
        (NUMBER):1
    (
      (IDENT):log
      if
        -
          (NUMBER):1
        (NUMBER):1
        (NUMBER):0
    (ASSIGNMENT):=
      (IDENT):a
      []:ARRAY
        (NUMBER):5
        (NUMBER):2
    (ASSIGNMENT):=
      [
        (IDENT):a
        (NUMBER):0
      (STRING):fads
    (
      (IDENT):log
      (IDENT):a
fun
  (
    (IDENT):checkWhile
  {
    (ASSIGNMENT):=
      (IDENT):arg
      (NUMBER):0
    if
      ==
        (NUMBER):1
        (NUMBER):1
      {
        while
          <
            (IDENT):arg
            (NUMBER):10
          {
            if
              >
                (IDENT):arg
                (NUMBER):5
              {
                break
            (
              (IDENT):test
              <=
                (IDENT):arg
                (NUMBER):5
            (ASSIGNMENT):=
              (IDENT):arg
              +
                (IDENT):arg
                (NUMBER):1
            continue
            (
              (IDENT):test
              ==
                (NUMBER):1
                (NUMBER):2
fun
  (
    (IDENT):checkNestedReturn
  {
    if
      ==
        (NUMBER):1
        (NUMBER):1
      {
        while
          ==
            (NUMBER):1
            (NUMBER):1
          {
            if
              ==
                (NUMBER):1
                (NUMBER):1
              {
                return
                  (NUMBER):1
fun
  (
    (IDENT):checkType
  {
    (
      (IDENT):test
      is
        (NUMBER):0.0
        (IDENT):Double
    (
      (IDENT):test
      is
        (NUMBER):0
        (IDENT):Int
    (
      (IDENT):test
      is
        (STRING):
        (IDENT):String
    (
      (IDENT):test
      is
        []:ARRAY
        (IDENT):Array
    (
      (IDENT):test
      is
        (
          (IDENT):A
        (IDENT):A
    (
      (IDENT):test
      isnot
        (NUMBER):0
        (IDENT):Array
fun
  (
    (IDENT):checkArray
  {
    (ASSIGNMENT):=
      (IDENT):a
      []:ARRAY
    (LINK):.
      (IDENT):a
      (
        (IDENT):add
        (NUMBER):0
        (IDENT):a
    (LINK):.
      (IDENT):a
      (
        (IDENT):add
        []:ARRAY
          (NUMBER):1
          (NUMBER):2
    (
      (IDENT):test
      ==
        (
          (IDENT):str
          (IDENT):a
        (STRING):[this, [1, 2]]
    (
      (IDENT):test
      ==
        [
          [
            [
              (IDENT):a
              (NUMBER):0
            (NUMBER):0
          (NUMBER):1
        []:ARRAY
          (NUMBER):1
          (NUMBER):2
    (LINK):.
      (IDENT):a
      (
        (IDENT):removeAt
        (NUMBER):0
    (
      (IDENT):test
      ==
        (IDENT):a
        []:ARRAY
          []:ARRAY
            (NUMBER):1
            (NUMBER):2
    (LINK):.
      (IDENT):a
      (
        (IDENT):remove
        []:ARRAY
          (NUMBER):1
          (NUMBER):2
    (
      (IDENT):test
      ==
        (IDENT):a
        []:ARRAY
    (
      (IDENT):test
      !
        (LINK):.
          (IDENT):a
          (
            (IDENT):has
            (NUMBER):0
    (LINK):.
      (IDENT):a
      (
        (IDENT):add
        (NUMBER):0
    (
      (IDENT):test
      (LINK):.
        (IDENT):a
        (
          (IDENT):has
          (NUMBER):0
    (
      (IDENT):test
      (LINK):.
        []:ARRAY
          (NUMBER):1
          (NUMBER):2
          (NUMBER):3
        (
          (IDENT):has
          (NUMBER):1
class
  (IDENT):Segment
  {
    (ASSIGNMENT):=
      (IDENT):c
      +
        +
          (IDENT):a
          (IDENT):b
        (IDENT):a
    (ASSIGNMENT):=
      (IDENT):iter
      (NUMBER):1
    (ASSIGNMENT):=
      (IDENT):a
      (NUMBER):5
    (ASSIGNMENT):=
      (IDENT):b
      (IDENT):a
fun
  (
    (IDENT):whileFun
  {
    (ASSIGNMENT):=
      (IDENT):a
      (NUMBER):1
    while
      <
        (IDENT):a
        (NUMBER):5
      {
        if
          ==
            %
              (IDENT):a
              (NUMBER):2
            (NUMBER):0
          {
            (
              (IDENT):log
              (IDENT):a
          {
            (
              (IDENT):log
              +
                (IDENT):a
                (NUMBER):1
        (ASSIGNMENT):=
          (IDENT):a
          +
            (IDENT):a
            (NUMBER):1
    (
      (IDENT):log
      (IDENT):a
class
  (IDENT):A
  
  (IDENT):e
  {
class
  (IDENT):B
  (IDENT):A
  {
class
  (IDENT):D
  (LINK):.
    (IDENT):imported
    (IDENT):A
  (IDENT):srv
  {
class
  (IDENT):Colors
  {
    (ASSIGNMENT):=
      (IDENT):BLACK
      (STRING):000000
    (ASSIGNMENT):=
      (IDENT):WHITE
      (STRING):FFFFFF
    (ASSIGNMENT):=
      (IDENT):GRAY
      (STRING):929292
    (ASSIGNMENT):=
      (IDENT):RED
      (STRING):BF3011
    (ASSIGNMENT):=
      (IDENT):ORANGE
      (STRING):DF8022
    (ASSIGNMENT):=
      (IDENT):YELLOW
      (STRING):E5B527
    (ASSIGNMENT):=
      (IDENT):MINT
      (STRING):26D07E
    (ASSIGNMENT):=
      (IDENT):GREEN
      (STRING):06694A
    (ASSIGNMENT):=
      (IDENT):BLUE
      (STRING):3896D4
    (ASSIGNMENT):=
      (IDENT):INDIGO
      (STRING):253092
    (ASSIGNMENT):=
      (IDENT):PURPLE
      (STRING):820D7C
    (ASSIGNMENT):=
      (IDENT):CHERRY
      (STRING):FD5FF0
    (ASSIGNMENT):=
      (IDENT):CHERRY
      (STRING):69122D
class
  (IDENT):Root
  {
    (ASSIGNMENT):=
      (IDENT):segm
      (
        (IDENT):Segment
    (ASSIGNMENT):=
      (IDENT):iter
      (NUMBER):0
fun
  (
    (IDENT):toDegrees
    (IDENT):rad
  {
    return
    (ASSIGNMENT):=
      (IDENT):a
      (LINK):.
        (IDENT):b
        (LINK):.
          (IDENT):c
          (LINK):.
            (IDENT):d
            (LINK):.
              (IDENT):e
              (LINK):.
                (IDENT):f
                (LINK):.
                  (IDENT):g
                  (LINK):.
                    (IDENT):h
                    (LINK):.
                      (IDENT):parent
                      (LINK):.
                        if
                          ==
                            (IDENT):a
                            true
                          (IDENT):u
                          (IDENT):b
                        (IDENT):t
class
  (IDENT):Math
  {
    (ASSIGNMENT):=
      (IDENT):RANDOM_SEED
      (NUMBER):42
    (ASSIGNMENT):=
      (IDENT):PI
      (NUMBER):3.1415926
fun
  (
    (IDENT):rotate
    (IDENT):point
    (IDENT):pivot
    (IDENT):angle
  {
    break
fun
  (
    (IDENT):abs
    (IDENT):x
  {
    return
      if
        <
          (IDENT):x
          (NUMBER):0
        -
          (IDENT):x
        (IDENT):x
fun
  (
    (IDENT):toRadians
    (IDENT):deg
  {
    if
      >
        (IDENT):deg
        (NUMBER):3
      {
        return
          /
            *
              (
                (IDENT):abs
                -
                  (IDENT):deg
              (NUMBER):3
            (NUMBER):180
      {
        return
          (NUMBER):0
fun
  (
    (IDENT):rndInt
    (IDENT):a
    (IDENT):b
  {
    (ASSIGNMENT):=
      (IDENT):t
      (
        (IDENT):int
        *
          (
            (IDENT):rnd
          +
            -
              (IDENT):b
              (IDENT):a
            (NUMBER):1
    (
      (IDENT):log
      +
        (STRING):t:
        (IDENT):t
    (
      (IDENT):log
      (IDENT):t
    return
      +
        (IDENT):a
        (IDENT):t
fun
  (
    (IDENT):all
    (IDENT):classRef
  {
    (ASSIGNMENT):=
      (IDENT):res
      []:ARRAY
    (ASSIGNMENT):=
      (IDENT):stack
      []:ARRAY
        (IDENT):Root
    while
      >
        (LINK):.
          (IDENT):stack
          (IDENT):size
        (NUMBER):0
      {
        (ASSIGNMENT):=
          (IDENT):current
          (LINK):.
            (IDENT):stack
            (
              (IDENT):remove
              (IDENT):i
        if
          is
            (IDENT):current
            (IDENT):classRef
          {
            (LINK):.
              (IDENT):res
              (
                (IDENT):add
                (IDENT):current
          {
    (LINK):.
      (IDENT):stack
      (
        (IDENT):add
        isnot
          (LINK):.
            (IDENT):res
            (IDENT):properties
          (IDENT):Value

Analyzing:testCode.redi
import
  (IDENT):same
import
  (IDENT):other
fun
  (
    (IDENT):getFileName
  {
    return
      (STRING):imported
fun
  (
    (IDENT):addition
    (IDENT):a
    (IDENT):b
  {
    (
      (IDENT):get
    (
      (IDENT):test
      ==
        (LINK):.
          (IDENT):same
          (
            (IDENT):addition
            (IDENT):a
            (IDENT):b
        +
          +
            (IDENT):a
            (IDENT):b
          (NUMBER):1
    (
      (IDENT):log
      ==
        (
          (IDENT):getFileName
        (STRING):imported
    return
      +
        (IDENT):a
        (IDENT):b

Analyzing:imported
fun
  (
    (IDENT):getFileName
  {
    return
      (STRING):same
fun
  (
    (IDENT):addition
    (IDENT):a
    (IDENT):b
  {
    (
      (IDENT):test
      ==
        (
          (IDENT):getFileName
        (STRING):same
    return
      +
        +
          (IDENT):a
          (IDENT):b
        (NUMBER):1
fun
  (
    (IDENT):get
  {
    (
      (IDENT):log
      (STRING):from Same

Analyzing:same
fun
  (
    (IDENT):get
  {
    (
      (IDENT):log
      (STRING):from Other

Analyzing:other
Exception in thread "main" lexer.PositionalException: "(" unknown invocated identifier get at 8,7-7
	at token.TokenFactory$Companion.createSpecificIdentifierFromInvocation(TokenFactory.kt:108)
	at lexer.SemanticAnalyzer.changeTokenType(SemanticAnalyzer.kt:79)
	at lexer.SemanticAnalyzer.changeTokenType(SemanticAnalyzer.kt:85)
	at lexer.SemanticAnalyzer.changeIdentTokens(SemanticAnalyzer.kt:61)
	at lexer.SemanticAnalyzer.analyze(SemanticAnalyzer.kt:20)
	at MainKt.readFile(Main.kt:31)
	at MainKt.readFile$default(Main.kt:20)
	at lexer.SemanticAnalyzer.createAssociations(SemanticAnalyzer.kt:40)
	at lexer.SemanticAnalyzer.analyze(SemanticAnalyzer.kt:18)
	at MainKt.readFile(Main.kt:31)
	at MainKt.readFile$default(Main.kt:20)
	at MainKt.main(Main.kt:15)
	at MainKt.main(Main.kt)

Process finished with exit code 1
