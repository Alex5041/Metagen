import src.commonTest.resources.imported as imported
import std.svg as svg
import std.math as math
import std.geometry2D as geom

fun checkMultipleCalls(a)
{
    b = a + 0
    if(a > 1)
    {
        res = 1 + checkMultipleCalls(a - 1)
    } else {
        res = 1
    }
    test(a == b)
    print("res: " +res + ", a: "+ a)
    return res
}

class TestClass {
    // sb.add(attributes[i]["key"] + "=\"" + attributes[i]["value"] + "\"")
    c = b
    b = a
    a = 1
}

class Position {
    x = 0
    y = 0
}

class Nothing {
    exportArgs = {"type":"node","attributes":{}}
}

class Segment {
    iter = (parent?.iter ?? 0) + 1
    root = if(iter < 2) Segment() else Nothing()
    start = Position(x = parent?.end.x ?? 0, y = parent?.end.y ?? 0)
    end = math.rotate(Position(x = start.x, y = start.y + 10), 30, start)
    exportArgs = {"exported":"line","type":"node","attributes":{"x1": start.x, "y1": start.y}}
}

class DoubleSegment {
    iter = 1
   // left = Segment()
   // right = Segment()
}

fun main() {
    print(geom.Constants.PI)
    a = imported.A()
    print("imported:" + a)
    s = Segment()
    attributes = list(s.exportArgs["attributes"])
    print([1,2,3].has(1))
    testing = 1
    if(1) {
        testing = 2
        }
    print(testing)
    prim = 123.123
    r = prim
    r = r.round()
    print(r)
    print(A() is B)
    a = Point(x = 5, y = 3)
    b = a.rotate(90)
    b.x = 2
    print(a.x)
    print(str(a.x) + " " + a.y)
    a = [1,2,3,4]
    print(a.joinToString(""))



    B() is A
    m = {"a":1,2:"c"}
    print(m)
    //a = []
    //a.add(0,a)
    //a = Something()
    a = Segment()
    svg.createSVG(a, 100, 100)
    print(a)
    a = DoubleSegment()
    print(a)
    a = TestClass()
    print(a)
    a = Something()
    print(a)
    assignmentTest()


    test(addition(2, 3) == 5)
    a = [2]
    a.add([1])
    a.add(a)
    print(a)
    checkLink()
    checkType()
    test(checkMultipleCalls(3) == 3)
    test(checkNestedReturn() == 1)
    primitiveTest()
  //  b = i()
//	print([0] + 1)
//	print(("t" + "t")[0])
//	print(5 / 2)
//	a = toRadians(32)
//	print(rndInt(64,999))
//	print(rndInt(64,999))
//	c = Something()
//	arr = [c,"a",1]
//	print(arr)
//	add(arr,2)
//	add(arr,1,2)
//	print(arr)
//	print(remove(arr,c))
//	print(arr)
//	removeAt(arr,1)
//	print(arr)
//	print(has(arr,2))
//	a = []
//	b = []
//	print(a == b)
//	print([0] == [0.0])
//	whileFun()
	//Root()
	//c = Something()
	//d = c
	//c.e = Something()
//	print(c)
//	print(d)

	a = [5,2]
	a[0] = "fads"
	print(a)
	testMath()
}

fun testMath() {
    print(solveSquare(2,1))
}

fun checkLink() {
    // no variable links
    test(-0.2.abs() == -0.2)
    test((-0.2).abs() == 0.2)
    test(1.max(2) == 2)
    test(0.1.max(0.01) == 0.1)
    test(1.MAX_VALUE == 2147483647)

    test("abc".reversed() == "cba")

    test((if(1) -2 else 0).abs() == 2)
    // file links

    test(imported.getFileName() == "imported")

    a = A()
    a.s = 10
    test(a.s == 10)
    //test(a.t == 0)
    b = 2
}

fun assignmentTest() {
    a = b = c = 2
    test(a == 2 && b == 2 && c == 2)
    a = A()
    a.s = 2
    a.s = 3
    test(a.s == 3)
}

fun primitiveTest() {

}

fun checkNestedReturn() {
    if(1 == 1) {
        while(1 == 1) {
            if(1 == 1) {
                return 1
            }
        }
    }
}

fun checkType() {
	test(0.0 is Double)
	test(0 is Int)
	test("" is String)
	test([] is List)
	test(A() is A)
	print(B() is A)
	test(B() is A)
	test(0 !is List)
}

class Something {
	c = a + b + a
	iter = 1
	a = 5
	b = a
}

fun whileFun() {
	a = 1
	while(a < 5) {
		if(a % 2 == 0){
			print(a)
		} else{
			print(a + 1)
		}
		a = a + 1
	}
	print(a)
}

class A {
    a = 1
}

class B : A {}

class D:imported.A {}

class Colors {
	BLACK = "000000"
	WHITE = "FFFFFF"
	GRAY = "929292"
	RED = "BF3011"
	ORANGE = "DF8022"
	YELLOW = "E5B527"
	MINT = "26D07E"
	GREEN = "06694A"
	BLUE = "3896D4"
	INDIGO = "253092"
	PURPLE = "820D7C"
	CHERRY = "FD5FF0"
	// CHERRY = "69122D"
}

class Root {
	segm = Something()
	iter = 0
}

fun toDegrees(rad) {
	return
	a = b.c.d.e.f.g.h.parent.t
}


class Math {
	RANDOM_SEED = 42
	PI = 3.1415926
}

fun rotate(point, pivot, angle) {}

fun abs(x) {
	return if (x < 0) -x else x
}

// here two blocks inside each other. Return won't be passed.
fun toRadians(deg) {
    print("FIEFNEEFIN")
	if(deg > 3){
		return abs( \
		-deg) * 3 / 180
} else {return 0}
}

// returns random int in range [a,b]
fun rndInt(a,b)  {
	t = int(rnd() * ((b - a) + 1))
	print("t:" + t)
	print(t)
	return a + t
}

// get all classes of classRef type
fun all(classRef) {
	res = []
	stack = [Root]
	while(stack.size > 0) {
		current = stack.remove(i)
		if(current is classRef) {
			res.add(current)
		} else {
		}
	}
	stack.add(res.properties !is Value)
}
