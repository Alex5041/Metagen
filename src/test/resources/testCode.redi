import imported
import svg
import math

class TestClass {
    // sb.add(attributes[i]["key"] + "=\"" + attributes[i]["value"] + "\"")
    c = b
    b = a
    a = 1
}

class Position {
    x = 0
    y = 0
}

class Nothing {
    exportArgs = {"type":"node","attributes":{}}
}

class S {
    iter = if(parent == 0) 0 else (1 + parent.iter)
    root = if(iter < 2) S() else Nothing()
    start = Position(x = if(parent == 0) 0 else parent.end.x, y = if(parent == 0) 0 else parent.end.y)
    end = math.rotate(Position(x = start.x, y = start.y + 10), 30, start)
    exportArgs = {"exported":"line","type":"node","attributes":{"x1": start.x, "y1": start.y}}
}

class DoubleSegment {
    root = Segment()
}

fun main() {
    B() is A
    m = {"a":1,2:"c"}
    log(m)
    //a = []
    //a.add(0,a)
    //a = Segment()
    a = S()
    svg.create(a,100,100)
    log(a)
    a = DoubleSegment()
    log(a)
    a = TestClass()
    log(a)
    a = Segment()
    log(a)
    checkArray()
    checkArray()


    test(addition(2, 3) == 5)
    a = [2]
    a.add([1])
    a.add(a)
    log(a)
    checkLink()
    checkType()
    checkArray()
    checkWhile()
    test(checkMultipleCalls(3) == 3)
    test(checkNestedReturn() == 1)
  //  b = i()
//	log([0] + 1)
//	log(("t" + "t")[0])
//	log(5 / 2)
//	a = toRadians(32)
//	log(rndInt(64,999))
//	log(rndInt(64,999))
//	c = Segment()
//	arr = [c,"a",1]
//	log(arr)
//	add(arr,2)
//	add(arr,1,2)
//	log(arr)
//	log(remove(arr,c))
//	log(arr)
//	removeAt(arr,1)
//	log(arr)
//	log(has(arr,2))
//	a = []
//	b = []
//	log(a == b)
//	log([0] == [0.0])
//	whileFun()
	//Root()
	//c = Segment()
	//d = c
	//c.e = Segment()
//	log(c)
//	log(d)

	a = [5,2]
	a[0] = "fads"
	log(a)
}

fun checkLink() {
    // no variable links
    test(-0.2.abs() == -0.2)
    test((-0.2).abs() == 0.2)
    test(1.max(2) == 2)
    test(0.1.max(0.01) == 0.1)
    test(1.MAX_VALUE == 2147483647)

    test("abc".reversed() == "cba")

    test((if(1) -2 else 0).abs() == 2)
    // file links

    test(imported.getFileName() == "imported")

    a = 1
    b = 2
}

fun checkMultipleCalls(a) {
    b = a + 0
    if(a > 1) {
        res = 1 + checkMultipleCalls(a - 1)
    } else {
        res = 1
    }
    test(a == b)
    checkArray()
    checkArray()
    log("res: " +res + ", a: "+ a)
    return res
}

fun checkWhile() {
	arg = 0
	if(1 == 1){
		while(arg < 10) {
			if(arg > 5){
				break
			}
			test(arg <= 5)
			arg = arg + 1
			continue // leave before wrong test
			test(1==2)
		}
	}
}

fun checkNestedReturn() {
    if(1 == 1) {
        while(1 == 1) {
            if(1 == 1) {
                return 1
            }
        }
    }
}

fun checkType() {
	test(0.0 is Double)
	test(0 is Int)
	test("" is String)
	test([] is Array)
	test(A() is A)
	log(B() is A)
	test(B() is A) // TODO initialize supertypes
	test(0 isnot Array)
}

fun checkArray() {
    a = []
    a.add(0,a)
    a.add([1,2])
    test(str(a)=="[this, [1, 2]]")
    test(a[0][0][1]==[1,2])
    a.removeAt(0)
    test(a==[[1,2]])
    a.remove([1,2])
    test(a==[])
    test(!a.has(0))
    a.add(0)
    test(a.has(0))
    test([1,2,3].has(1))
}

class Segment {
	c = a + b + a
	iter = 1
	a = 5
	b = a
}

fun whileFun() {
	a = 1
	while(a < 5) {
		if(a % 2 == 0){
			log(a)
		} else{
			log(a + 1)
		}
		a = a + 1
	}
	log(a)
}

class A export e{
    a = 1
}

class B : A {}

class D:imported.A export srv{}

class Colors {
	BLACK = "000000"
	WHITE = "FFFFFF"
	GRAY = "929292"
	RED = "BF3011"
	ORANGE = "DF8022"
	YELLOW = "E5B527"
	MINT = "26D07E"
	GREEN = "06694A"
	BLUE = "3896D4"
	INDIGO = "253092"
	PURPLE = "820D7C"
	CHERRY = "FD5FF0"
	CHERRY = "69122D"
}

class Root {
	segm = Segment()
	iter = 0
}

fun toDegrees(rad) {
	return
	a = b.c.d.e.f.g.h.parent.(if(a == true) u else b).t
}


class Math {
	RANDOM_SEED = 42
	PI = 3.1415926
}

fun rotate(point, pivot, angle) {
break}

fun abs(x) {
	return if (x < 0) -x else x
}

// here two blocks inside each other. Return won't be passed.
fun toRadians(deg) {
	if(deg > 3){
		return abs( \
		-deg) * 3 / 180
} else {return 0}
}

// returns random int in range [a,b]
fun rndInt(a,b)  {
	t = int(rnd() * ((b - a) + 1))
	log("t:" + t)
	log(t)
	return a + t
}

// get all classes of classRef type
fun all(classRef) {
	res = []
	stack = [Root]
	while(stack.size > 0) {
		current = stack.remove(i)
		if(current is classRef) {
			res.add(current)
		} else {
		}
	}
	stack.add(res.properties isnot Value)
}
