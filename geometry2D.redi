object Constants {
    PI = 3.1415926539
}

fun toRadians(angle) {
    return double(angle) / 180 * Constants.PI
}

fun toDegrees(angle) {
    return double(angle) * Constants.PI / 180
}

class Point {
    x = 0
    y = 0
    // angle in degrees
    fun rotate(angle, pivot = Point()) {
        s = sin(toRadians(angle))
        c = cos(toRadians(angle))
        log(s + " " + c)
        this.x = this.x - pivot.x
        this.y = this.y - pivot.y

        xnew = this.x * c - this.y * s
        ynew = this.x * s + this.y * c
        this.x = pivot.x + xnew
        this.y = pivot.y + ynew

        return this
    }

}

class Segment {
    p1 = Point()
    p2 = Point()

    fun middle() {
        return Point(x = (p1.x + p2.x) / 2, y = (p1.y + p2.y) / 2)
    }

    fun intersects(other) {

    }

    fun isPerpendicular(other) {}
}

class Triangle {
    p1 = Point()
    p2 = Point()
    p3 = Point()

    fun centerMass() {
        return Point(x = (p1.x + p2.x + p3.x) / 3, y = (p1.y + p2.y + p3.y) / 3)
    }
    fun rotate(angle, pivot = centerMass()) {

    }
}

class Circle {
}

class Polyline {
    points = []

    fun centerMass() {

    }
}