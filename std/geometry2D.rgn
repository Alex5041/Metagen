// also a vector class
class Point {
    x = 0
    y = 0

    fun plus(other) { return Point(x=x + other.x, y=y + other.y) }
    fun minus(other) { return Point(x=x - other.x, y=y - other.y) }
    fun crossProduct(other) { return x * other.y - y * other.x }
    fun scale(coeff) { return Point(x=x * coeff, y=y * coeff) }

    // angle in degrees // TODO invocation in function args
    fun rotate(angle, pivot = Point()) {
        s = toRadians(angle).sin()
        c = toRadians(angle).cos()
        this.x = this.x - pivot.x
        this.y = this.y - pivot.y

        xnew = this.x * c - this.y * s
        ynew = this.x * s + this.y * c
        this.x = pivot.x + xnew
        this.y = pivot.y + ynew
        return this
    }

    fun distance(p) {
        if(p is Point)
            return ((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y)).sqrt()
    }
}
object Constants {
    PI = 3.1415926539
}

fun toRadians(angle) {
    return double(angle) / 180 * Constants.PI
}

fun toDegrees(angle) {
    return double(angle) * Constants.PI / 180
}

class Segment {
    p1 = Point()
    p2 = Point()

    fun length() { p1;


    return p1.distance(p2) }
    fun vec() { return p2.minus(p1) }
    fun isPerpendicular(other) { return dotProduct(other) == 0 }

    fun center() { return centerFigure(this) }
    fun rotate(angle, pivot = center()) { rotateFigure(this, angle, pivot) }

    fun dotProduct(other) {
        vec = this.vec()
        otherVec = other.vec()
        return vec.x * otherVec.x + vec.y * otherVec.y
    }

    fun angleBetween(other) {
        if(other is Segment)
            return cosAngleBetweenSegments(this, other).acos()
        if(other is Line)
            return cosAngleBetweenSegments(this, other.segment).acos()
    }

    fun getLine() {
        return Line(a=p2.y-p1.y, b=p1.x-p2.x, c=p1.x*(p1.y-p2.y)+p1.y*(p2.x-p1.x))
    }

    fun inSegment(point) {
        line = getLine()
        if(!line.inLine(point))
            return false
        inX = if(point.x > p1.x) point.x <= p2.x else point.x > p2.x
        inY = if(point.y > p1.y) point.y <= p2.y else point.y > p2.y
        return inX && inY
    }
}

class Line {
    // ax + by + c = 0
    a = 0
    b = 1
    c = 0

    fun inLine(point) {
        return a*point.x + b*point.y + c == 0
    }

    // get a base of the perpendicular from `point` to this line
    fun toLine(point) {
        perpendicular = getPerpendicularLineContainingPoint(point)
    }

    fun getPerpendicularLineContainingPoint(point) {
        aN = b
        bN = a
        cN = -(aN * point.x + bN * point.y)
        return Line(a=aN,b=bN,c=cN)
    }

    fun intersectsLine(line) {
        if(isCollinear(line)) {
            if(isSameLine(line))
                if(b == 0)
                    return [Point(x=-c/a, y=0), Point(x=-c/a, y=1)]
                else return [Point(x=0, y=-c/b), Point(x=1, y=(-c-a)/b)]
            else return 0
        }
        return Point(x=(b*other.c - c*other.b)/(a*other.b - b*other.a), \
            y=(c*other.a - a*other.c)/(a*other.b - b*other.a))
    }

    fun isSameLine(other) {
        if(isCollinear(other))
            return double(c) / a == double(other.c) / other.a
        return false
    }

    fun isCollinear(other) {
        if(b == 0 || other.b == 0) {
            if(b != other.b)
                return false
            return true
        }
        return double(a) / b == double(other.a) / other.b
    }
}

class Rectangle {
    width = 1
    height = 1
    center = Point()
    rotation = 0

    fun center() { return center }
    fun rotate(angle, pivot = center()) { rotateFigure(this, angle, pivot) }
    fun length() { return }
}

class Triangle {
    p1 = Point()
    p2 = Point()
    p3 = Point()

    fun center() { return centerFigure(this) }
    fun rotate(angle, pivot = center()) { rotateFigure(this, angle, pivot) }
}

class Circle {
    r = 1
    center = Point()
}

class Ellipse {
    a = 1
    b = 1
    center = Point()
    rotation = 0

    fun coefficients() {}
    fun rotate(angle, pivot = center) { rotateFigure(this, angle, pivot) }
}

class Polyline {
    points = []

    fun center() { return centerFromPointsArray(points) }
    fun rotate(angle, pivot = center()) { rotateFigure(this, angle, pivot) }
}

class Plane {

    fun center() {
        points = []
        foreach(i in objects) {
            points.add(centerFigure(i))
        }

    }
    fun rotate(angle, pivot = center()) {
        foreach(i in range(0, objects.size-1)) {
            rotateFigure(this, angle, pivot)
        }
    }
}

fun insCircles(c1, c2) {

}

fun cosAngleBetweenSegments(a, b) {
    return double(a.dotProduct(b)) / a.length() / b.length()
}

fun rotateFigure(fig, angle, pivot) {
    props = fig.properties
    foreach(i in range(0, props.size-1)) {
        if(props[i] is Point)
            props[i] = props[i].rotate(angle, pivot)
    }
}

fun translateFigure(fig, vec) {
    props = fig.properties
    foreach(i in range(0, props.size-1))
        if(props[i] is Point)
            props[i] = props[i].plus(vec)
}

fun scaleArrayFromLine(points, segment, coeff) {
//    i = 0
//    while(i < points.size) {
//        if(points[i] is Point) {
//            vec = points[i].minus(point).scale(coeff)
//            points[i] = point.plus(vec)
//        }
//        i = i + 1
//    }
}

fun scaleArrayFromPoint(points, point, coeff) {
    foreach(i in range(0, points.size-1)) {
        if(points[i] is Point) {
            vec = points[i].minus(point).scale(coeff)
            points[i] = point.plus(vec)
        }
    }
}

fun centerFigure(fig) {
    props = array(fig.properties)
    array = []
    foreach(i in range(0, props.size-1)) {
        if(props[i]["value"] is Point)
            array.add(props[i]["value"])
    }
    return centerFromPointsArray(array)
}

fun centerFromPointsArray(array) {
    res = Point()
    foreach(i in range(0, array.size-1)) {
        res.x = res.x + array[i].x
        res.y = res.y + array[i].y
    }
    res.x = double(res.x) / array.size
    res.y = double(res.y) / array.size
    return res
}
