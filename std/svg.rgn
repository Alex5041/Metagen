fun createHeader(node) {
    res = StringBuilder(string=["<" + getName(node)] + " ")
    foreach(attr in (node?.svgArgs["attributes"].entries ?? [])) {
        res.add(str(attr["key"]) + "=\"" + attr["value"] + "\"")
    }
    res.add(">")
    return res.toString()
}

fun createFooter(node) { return "\n</" + getName(node) + ">" }

fun getName(node, default="g") {
    return node?.svgArgs["name"] ?? default
}

fun createBody(node, stack, created) {
    res = StringBuilder()
    foreach(child in node.properties.entries) {
        if((child["value"] !is Class) \
            || child["value"] == node \
            || created[str(child["value"])] != null) continue
        if(child["value"]?.svgArgs["inParent"] ?? false) {
            res.add("\t\n" + createNode(child["value"], stack, created))
        } else stack.add(createNode(child["value"], stack, created))
    }
    return res.toString()
}

fun createNode(node, stack, created) {
    created[str(node)] = true
    return createHeader(node) + createBody(node, stack, created) \
        + createFooter(node)
}

fun createSVG(root, width=100, height=100) {
    res = StringBuilder(string=["<svg width=\"" + width \
        + "\" height=\"" + height + "\">\n"])
    stack = []
    res.add(createNode(root, stack, {}))
    stack.reverse()
    foreach(i in stack)
        res.add(i)
    res.add("\n</svg>")
    return res.toString()
}

/**
exportArgs:
    export: Bool = false - export or not
    type: String = "element" - "attribute" or "element"
    inParent: String = false - nest element inside parent element,
        if both instances' type is "element"
    name: String - name of exported attribute/element
    value: Any - value of attribute node
    attributes - Dictionary<String, Any> - all attributes are
        added from dictionary to element
*/

fun transform(type, value, node) {
    if(node?.svgArgs == null)
        node.svgArgs = {"attributes":{"transform":{}}}
    else if(node.svgArgs["attributes"] == null)
        node.svgArgs.attributes = {"transform":{}}
    else if(!node.svgArgs["attributes"].has("transform"))
        node.svgArgs["attributes"]["transform"] = {}
    node.svgArgs["transform"][type] = value
}

/* create attibute string for transform
 and transform-origin, if exists */
fun transformToString(transform) {
    res = StringBuilder("transform=\"")
    foreach(entry in transform) {
        if(entry["key"] != "transform-origin") {
            res.add(entry["key"])
            res.add("(" + if(entry["value"] !is String) entry["value"].toString() \
                else value + ")")
        }
    }
    res.add("\"")
    if(transform.has("transform-origin")) {
        res.add("transform-origin=\"(")
        res.add(transform["transform-origin"].toString())
        res.add(")")
    }
    return res.toString()
}

class StringBuilder {
    string = []
    fun add(s) {
        string.add(s)
    }
    fun toString(sep="") {
        return string.joinToString(sep)
    }
}