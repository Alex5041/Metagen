fun add(node, sb) {
    containers = ["group, svg"]
    added = node.exportArgs["exported"]
    propertiesArray = array(node.properties)
    attributes = array(node.exportArgs["attributes"])
    if(added != 0) {
        sb.add("<" + added)
        i = 0
        while(i < attributes.size) {
            sb.add(attributes[i]["key"] + "=\"" + attributes[i]["value"] + "\"")
            i = i + 1
        }
        sb.add(if(containers.has(added)) ">" else "/>")
    }
    if(containers.has(added)) {
        i = 0
        while(i < propertiesArray.size) {
            if(propertiesArray[i]["value"].exportArgs["type"] == "node" \
                & propertiesArray[i]["value"].exportArgs["inParent"]) {
                add(propertiesArray[i]["value"], sb)
                propertiesArray.removeAt(i)
                i = i - 1
            }
            i = i + 1
        }
        sb.add("<" + added + "/>\n")
    }
    i = 0
    while(i < propertiesArray.size) {
        if((propertiesArray[i]["value"].properties["exportArgs"] != 0) & propertiesArray[i]["value"].exportArgs["type"] == "node" \
            & (!propertiesArray[i]["value"].exportArgs["inParent"] & !containers.has(added))) {
            if(propertiesArray[i]["key"]!="parent" & propertiesArray[i]["key"] != "this") {
                add(propertiesArray[i]["value"], sb)
               }
            propertiesArray.removeAt(i)
            i = i - 1
        }
        i = i + 1
    }
}

fun addAttribute(node, sb) {
    sb.add(" ")
    sb.add(node.name)
    sb.add("=\"" + node.properties["value"] + "\"")
}

fun create(root, width, height) {
    sb = StringBuilder()
    sb.add("<svg \"" + width + "\" height \"" + height + "\">\n")
    add(root, sb)
    sb.add("</svg>")
    log(sb.toString())
}

class StringBuilder {
    string = []
    fun add(s) {
        string.add(s)
    }
    fun toString() {
        return string.joinToString("")
    }
}

// class A : B -> ["exported":"svg", "inParent": true] {}