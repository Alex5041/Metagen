containers = ["group, svg"]

fun add(node: Type, sb: StringBuilder) {
    added = node.properties["exported"]
    if(added) {
        sb.add("<" + added )
        i = 0
        while(i < node.properties.size) {
            if(node.properties[i].exportArgs["type"] == "attribute")
                addAttribute(node, sb)
            i = i + 1
        }
        sb.add(if(containers.has(added)) ">" else "/>")
    }
    if(containers.has(added)) {
        i = 0
        while(i < node.properties.size) {
            if(node.properties[i].exportArgs["type"] == "node" \
                && node.properties[i].exportArgs["inParent"])
                add(node.properties[i])
            i = i + 1
        }
        sb.add("<" + added + "/>\n")
    }
    while(i < node.properties.size) {
        if(node.properties[i].exportArgs["type"] == "node" \
            && (!node.properties[i].exportArgs["inParent"] && !containers.has(added)))
            add(node.properties[i])
        i = i + 1
    }
}

fun addAttribute(node: Type, sb: StringBuilder) {
    sb.add(" ")
    sb.add(node.name)
    sb.add("=\"" + node.properties["value"] + "\"")
}

fun create(root: Type, width = 100, height = 100) {
    sb = StringBuilder()
    sb.add("<svg \"" + width + "\" height \"" + height + "\">\n")
    add(sb, root)
    sb.add("</svg>")
}

class A : B -> ["exported":"svg", "inParent": true] {
}